[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  noremap <C-e> :NERDTreeToggle<CR>
  filetype plugin indent on
'''
on_i = 1

[[plugins]]
repo = 'tpope/vim-surround'
on_i = 1

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_i = 1

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_i = 1

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_source = '''
func! Multiple_cursors_before()
  if deoplete#is_enabled()
    call deoplete#disable()
    let g:deoplete_is_enable_before_multi_cursors = 1
  else
    let g:deoplete_is_enable_before_multi_cursors = 0
  endif
endfunc
func! Multiple_cursors_after()
  if g:deoplete_is_enable_before_multi_cursors
    call deoplete#enable()
  endif
endfunc
'''
on_i = 1

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'elzr/vim-json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''
on_i = 1

[[plugins]]
repo = 'Konfekt/FastFold'
on_i = 1

[[plugins]]
repo = 'Konfekt/FoldText'
on_i = 1

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['js','vue']
on_i = 1
hook_source = '''
  autocmd FileType vue syntax sync fromstart
'''

[[plugins]]
repo = 'kamykn/spelunker.vim'
hook_add = '''
  let g:enable_spelunker_vim = 0
'''
on_i = 1

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  let g:go_fmt_autosave = 0
  "let g:go_fmt_command = "goimports"
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_function_calls = 1
  
  " disable functions for LSP
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''
on_ft = ['go']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_i = 1

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<c-k>"
'''
on_i = 1

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_completion_enabled = 0
  let g:ale_lint_on_enter = 1

  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  highlight clear ALEErrorSign
  highlight clear ALEWarningSign

  let g:ale_linters = {
    \ 'go': ['golint', 'go vet'],
    \ 'python': ['flake8', 'pylint', 'mypy'],
  \}

  let g:ale_python_mypy_options = '--ignore-missing-imports --'

  let g:ale_fixers = {
  \ 'go': ['gofmt', 'goimports'],
  \ 'python': ['black', 'isort'],
  \ 'javascript': ['prettier'],
  \ 'typescript': ['prettier'],
  \ 'vue': ['prettier'],
  \}
  let g:ale_fix_on_save = 1

  " nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  " nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
on_i = 1

[[plugins]]
repo = 'junegunn/fzf'
build = './install -all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  noremap <Leader>gf :GFiles<CR>
  noremap <Leader>ff :Files<CR>
  noremap <Leader>r :Rg<CR>
'''
on_i = 1

[[plugins]]
repo = 'tyru/open-browser.vim'
on_i = 1

[[plugins]]
repo = 'tyru/open-browser-github.vim'
on_i = 1

[[plugins]]
repo = 'kannokanno/previm'
on_i = 1

[[plugins]]
repo = 'k0kubun/vim-open-github'
on_i = 1

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
on_i = 1
hook_add = '''
  set updatetime=300 " You will have bad experience for diagnostic messages when it's default 4000.
  set shortmess+=c " don't give |ins-completion-menu| messages.
  set signcolumn=yes " always show signcolumns

  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
  " Coc only does snippet and additional edit on confirm.
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  " Or use `complete_info` if your vim support it, like:
  " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>n <Plug>(coc-rename)

  " Remap for format selected region
  xmap <leader>o  <Plug>(coc-format-selected)
  nmap <leader>o  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Create mappings for function text object, requires document symbols feature of languageserver.
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

  " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
  " nmap <silent> <C-d> <Plug>(coc-range-select)
  " xmap <silent> <C-d> <Plug>(coc-range-select)

  " Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')

  " Use `:Fold` to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " use `:OR` for organize import of current buffer
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add status line support, for integration with other plugin, checkout `:h coc-status`
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Using CocList
  " Show all diagnostics
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  set noshowmode
  set cmdheight=1
  set laststatus=2
  let g:airline_theme='angr'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
